OS的基本特性是并发和共享，即在系统中存在几个相互独立的程序，交叉运行，共享资源
顺序：只有一个程序运行，该程序独占系统资源，执行不受外界影响
并发：一段时间内，有多个程序同时开始运行但尚未结束，而且次序不固定
	特点：间断性，失去封闭性，失去可再现性
一个具有一定独立功能的程序在数据集合上的一次动态执行过程叫做进程
进程与程序的区别：
	• 进程是动态的，程序是静态的
	• 进程是暂时的，程序是永久的
	• 组成不同：进程包括程序，数据和进程控制块
	• 进程和程序的对应关系：多次执行，一个程序可对应多个进程，调用关系，一个进程包括多个程序
进程特点：结构特征，动态性，并发性，独立性，异步性。

新建：创建进程
就绪：进程等待分配处理器
运行：指令执行
等待：进程等待某些时间发生
终止：进程执行完毕
PCB是一个专门的数据结构，系统用它来记录进程的外部特征，描述
进程的运动变化过程
PCB跟进程一一对应
PCB表：系统把PCB组织起来，并放在内存的固定区域中，构成了PCB表
PCB个数决定了系统最大可同时存在进程个数，并发度
链表，索引连接

作业队列(多道批处理系统):系统中所有进程集合
就绪队列：就绪并等待执行的所有进程的集合
设备队列：等待某一IO设备的进程队列
短程调度切换频率高，时间短
长程调度不快，时间长，控制了多到程序的道
中程调度为了缓解内存紧张，将内存中处于阻塞状态的进程换至外村中，
降低多到程序的度，当进程重新具备运行条件，在从外存调入内存。
上下文切换：当CPU切换至另一个进程，要保存旧进程的状态并加载新进程
的状态(为新进程调入保留的状态)
开销比较大，取决于硬件支持。









进程创建



进程创建：子进程也可以创建进程，叫做父进程
资源共享：父进程，子进程共享所有资源
		子进程共享父进程资源的子集
		父进程和子进程无资源共享
执行：并发执行//父进程等待子进程终止
地址空间：子女复制双亲//子女有一个程序被调用
用户键入一个命令，shell就创建一个进程
fork系统调用创建新进程
execlp：装入一个新的程序去执行(用一个新程序替代进程的内存空间)

进程终止：
进程执行到最后一项，并询问操作系统退出
	如果是子进程，就会给父进程输出数据 ，
	操作系统回收进程的资源
父进程可以终止子进程的执行
	子进程超量分配资源
	子进程的任务不在需要
	父进程终止(级联终止)

消息传递
建立通信连接
通过send/receive交换信息

直接通信：进程必须显示命名
	通信连接的特性：连接自动建立
				连接精确的与一对进程有关
				每一对只存在一个连接
				连接可以无向的，通常是双向的
	非对称：只有发送是显示命名的，不指名谁是接受者
间接通信：消息导向到信箱，并从信箱接收
		每一个信箱有一个唯一的id
			仅当共享一个信箱时进程才能通信
			连接可以同多个进程有关
			每一对进程可以共享多个通信连接
			连接可以是无向或者双向的


一个发送方，有多个接收方，接收方谁收到消息？
	1. 允许一个连接最多同两个进程相关
	2. 只允许一个时刻只有一个进程进行接收操作
	3. 允许系统任意选择接受者，发送者被通知谁是接受者





进程的两个基本特点：拥有资源的独立单位，可独立调度和分派的基本单位
进程是并发执行的基本单位
进程：资源分配单位和CPU调度单位。有称它为任务
线程：CPU调度的基本单位，进程只作为其他的资源调度单位
	• 只具备必不可少的资源：线程状态，程序计数器，寄存器上下文和栈
	• 同样具备就绪，运行，阻塞三种基本状态
	• 同属于一个进程的其他线程可以共享进程拥有的全部资源
	• 可以并发执行
线程优点：减少并发执行的时间和空间开销，因此容许在系统中建立更多的
线程来提高并发程度。
	1. 线程的创建时间比进程短
	2. 线程的终止时间比进程短
	3. 同进程内的线程切换时间比进程短
	4. 由于同进程内线程间共享资源，可以直接进行不通过内核的通信

进程和线程的比较：
	• 并发性：在引入进程的OS中，不仅进程之间可以并发执行，而且在一个进程
	中的多个线程之间也可以并发，因此使OS具有更好的并发性，从而能更有效
	的使用系统资源和提供系统吞吐量。
	• 拥有资源：进程是拥有资源的独立单位
	• 系统开销：在创建或撤销进程时，系统都要为之分配或回收资源，如内存空间
	IO设备等。因此OS所付出的开销明显大于在创建或撤销线程的开销。
	• 地址空间和其他资源：进程之间相互独立，同一个进程的各个线程共享--
	某进程内的线程在其他进程不可见
	• 通信：进程间通信IPC,线程间可以直接读写进程数据段来进行通信
	需要进程同步和互斥手段的辅助，以保证数据的一致性
	• 调度：线程上下文切换比进程上下文切换块的多

内核线程
由内核支持(依赖于OS)，在内核空间执行线程创建，调度和管理
内核线程才是作为CPU调度的基本单位

用户线程
由用户级线程池进程管理的线程，线程池提供对线程的创建，调度和管理的支持，无需内核
无需进行用户态/和心态的转换，所以速度快

内核线程和用户线程的区别
调度方式：内核线程调度和切换与进程相似，用户线程的调度不需要OS支持
调度单位：用户线程的调度以进程为单位，每个进程分配相同的时间片，在将时间分配给线程。对于内核线程，每个线程分配时间片
多对一(并发度低)
多个用户级线程映射到单个内核线程
任何时刻只有一个线程访问内核
用于不支持内核线程的系统中
一个用户线程发起系统调用而阻塞，则整个进程阻塞

一对一(提高了并发度，增大了开销)
一个用户级线程映射到单个内核线程

多对多(不限制应用的线程数，多个线程可以并发)

