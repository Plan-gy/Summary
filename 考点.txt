
自旋锁：当一个物理机器有多个处理器，能让两个以上的线程同时并行执行，我们可以让后面
请求锁的那个线程等一会，但不放弃处理器的执行时间，看看持有锁的线程是否很快就会释放
锁。为了让线程等待，我们要让线程执行一个忙循环，这就称为自旋锁。
自适应的自旋锁：自适应意味着自旋时间不固定，而是由前一次在同一个锁上的自旋时间和
锁的拥有者的状态决定。
轻量级锁：当代码进入同步块的时候，如果同步对象没有被锁定，虚拟机首先在当前线程中
建立一个锁记录的空间(Lock Record)，用于存储锁对象目前的运行时数据(Mark Word)的拷
贝，然后虚拟机会使用CAS常识将对象的Mark Word更新为指向Lock Record的指针。如果更新
成功，那么这个线程就拥有了该对象的锁，如果操作失败，虚拟机首先检查对象的Mark Word
是否指向当前线程的栈帧，如果指向说明当前线程已经获得了对象的锁，那就可以直接进入
同步块继续执行，否则说明这个锁对象被其他线程抢占了。
如果如果有两条以上的线程征用同一个锁，那轻量级锁不在有效，膨胀为中联机锁，
后面等待锁的线程也要进入阻塞状态。
解锁过程是通过CAS操作来进行的，如果对象的Mark Word仍然指向这线程的锁记录，哪就
用CAS操作把对象当前的Mark Word和线程中复制的替换回来，如果替换成功，整个同步完成了。
如果失败，说明有其他线程尝试过获取该锁，那就要在释放锁的同时，唤醒被挂起的线程。
偏向锁：如果说轻量级锁是在无竞争情况下使用CAS操作去消除同步使用的互斥量，哪偏向锁就是在
无竞争的情况下吧整个同步都消除掉，连CAS操作都不做。偏向于第一个获得它的线程，如果在接下
来的执行过程中，该锁没有被其他线程获取，则持有偏向锁的线程将永远不需要在进行同步。
使用过程：当虚拟机启用了偏向锁，那么当锁对象第一次被线程获取的时候，虚拟机将会把
对象头中的标志位设为01，及偏向模式。同时使用CAS操作吧获取到这个锁的线程ID记录在对象的
Mark Word中，如果CAS操作成功，持有偏向锁的线程以后每次进入这个锁相关的同步块时，虚拟机
都可以不再进行任何同步操作。当另外一个线程去尝试获取这个锁，偏向模式宣告结束。根据锁目前
是否处于被锁定的状态，撤销偏向后恢复到位锁定（01）或轻量级锁定（00）状态，后续的
同步就根据轻量级锁进行。






1.自我介绍
2.多线程的理解，锁
3.java对象创建方式
4.对象的特点
5.数据库的了解
6.linux命令。
7.数据结构，排序，树。
8.计算机网络url请求过程。
9.spring配置文件怎么配。
10.发红包功能测试。
29分钟。