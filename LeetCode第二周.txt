package algorithm2;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

/**
 * 给定一个正整数 n，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。

示例:

输入: 3
输出:
[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]

 * @author ASUS
 *
 */
public class Number59 {
	public static void main(String[] args) {
		int[][] generateMatrix = generateMatrix(4);
		for (int i = 0; i < generateMatrix.length; i++) {
			for (int j = 0; j < generateMatrix[i].length; j++) {
				System.out.print(generateMatrix[i][j]+"  \t");
			}
			System.out.println();
		}
		
	}
	 public static int[][] generateMatrix(int n) {
	     int[][] result=new int[n][n];
	     int count=1;
	     int j=0;
		 while(count<=n*n) {
			 for (int i = j; i < n - j; i++)
				 result[j][i] = count++;
	         for (int i = j + 1; i < n - j; i++)
	             result[i][n - j - 1] = count++;
	         for (int i = n - j - 2; i >= j; i--)
	             result[n - j - 1][i] = count++;
	         for (int i = n -j - 2; i > j; i--)
	             result[i][j] = count++;
	         j++;
		 }
		 return result;
	 }
}



package algorithm2;
/**
 * 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。

机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。

现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？
 * @author ASUS
 *
 */
public class Number63 {
	public static void main(String[] args) {
		
	}
	public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        for(int i = 0; i<obstacleGrid.length;i++){
            for(int j = 0 ; j<obstacleGrid[i].length;j++){
                if(obstacleGrid[i][j] == 1){
                    obstacleGrid[i][j] = 0;
                    continue;
                }
                if(i==0&&j==0){
                    obstacleGrid[i][j] = 1;
                    continue;
                }
                if(i==0 || j==0){
                    obstacleGrid[i][j] = i==0?obstacleGrid[i][j-1]:obstacleGrid[i-1][j];
                    continue;
                }
                obstacleGrid[i][j] = obstacleGrid[i-1][j]+obstacleGrid[i][j-1];
            }
        }
        return obstacleGrid[obstacleGrid.length-1][obstacleGrid[0].length-1];
    }
}
