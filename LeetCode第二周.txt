package algorithm2;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

/**
 * 给定一个正整数 n，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。
示例:
输入: 3
输出:
[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]

 * @author ASUS
 *
 */
public class Number59 {
	public static void main(String[] args) {
		int[][] generateMatrix = generateMatrix(4);
		for (int i = 0; i < generateMatrix.length; i++) {
			for (int j = 0; j < generateMatrix[i].length; j++) {
				System.out.print(generateMatrix[i][j]+"  \t");
			}
			System.out.println();
		}
		
	}
	 public static int[][] generateMatrix(int n) {
	     int[][] result=new int[n][n];
	     int count=1;
	     int j=0;
		 while(count<=n*n) {
			 for (int i = j; i < n - j; i++)
				 result[j][i] = count++;
	         for (int i = j + 1; i < n - j; i++)
	             result[i][n - j - 1] = count++;
	         for (int i = n - j - 2; i >= j; i--)
	             result[n - j - 1][i] = count++;
	         for (int i = n -j - 2; i > j; i--)
	             result[i][j] = count++;
	         j++;
		 }
		 return result;
	 }
}



package algorithm2;
/**
 * 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。

机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。

现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？
 * @author ASUS
 *
 */
public class Number63 {
	public static void main(String[] args) {
		
	}
	public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        for(int i = 0; i<obstacleGrid.length;i++){
            for(int j = 0 ; j<obstacleGrid[i].length;j++){
                if(obstacleGrid[i][j] == 1){
                    obstacleGrid[i][j] = 0;
                    continue;
                }
                if(i==0&&j==0){
                    obstacleGrid[i][j] = 1;
                    continue;
                }
                if(i==0 || j==0){
                    obstacleGrid[i][j] = i==0?obstacleGrid[i][j-1]:obstacleGrid[i-1][j];
                    continue;
                }
                obstacleGrid[i][j] = obstacleGrid[i-1][j]+obstacleGrid[i][j-1];
            }
        }
        return obstacleGrid[obstacleGrid.length-1][obstacleGrid[0].length-1];
    }
}


package algorithm2;

import java.util.HashMap;
import java.util.Map;

/**
 * 给定四个包含整数的数组列表 A , B , C , D ,计算有多少个元组 (i, j, k, l) ，使得 A[i] + B[j] + C[k] + D[l] = 0。

为了使问题简单化，所有的 A, B, C, D 具有相同的长度 N，且 0 ≤ N ≤ 500 。所有整数的范围在 -228 到 228 - 1 之间，最终结果不会超过 231 - 1 。

例如:

输入:
A = [ 1, 2]
B = [-2,-1]
C = [-1, 2]
D = [ 0, 2]

输出:
2
 *
 */
public class Number454 {
	public static void main(String[] args) {
		
	}
//	public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
//        int count=0;
//		for (int i = 0; i < A.length; i++) {
//			for (int j = 0; j < B.length; j++) {
//				for (int j2 = 0; j2 < C.length; j2++) {
//					for (int k = 0; k < D.length; k++) {
//						if(A[i]+B[j]+C[j2]+D[k]==0) {
//							count++;
//						}
//					}
//				}
//			}
//		}
//		return count;
//    }
	public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
		int result=0;
		Map<Integer,Integer> map=new HashMap();
		for (int i = 0; i < A.length; i++) {
			for (int j = 0; j < B.length; j++) {
				int key=A[i]+B[j];
				if(map.containsKey(key)) {
					map.put(key, map.get(key)+1);
				}else {
					map.put(key, 1);					
				}
			}
		}
		for (int i = 0; i < C.length; i++) {
			for (int j = 0; j < D.length; j++) {
				int key=C[i]+D[j];
				if(map.containsKey(-key)) {
					result+=map.get(-key);
				}
			}
		}
		return result;
		
	}

}


package algorithm2;
/**
 * 给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。

返回 s 所有可能的分割方案。

示例:

输入: "aab"
输出:
[
  ["aa","b"],
  ["a","a","b"]
]
 */
import java.util.ArrayList;
import java.util.List;

public class Number131 {
	 List<List<String>> list = new ArrayList<>();
	    public List<List<String>> partition(String s) {
	        ArrayList<String>arr = new ArrayList<>();
	        dfs(s,arr);
	        return list;
	    }
	    private void dfs(String s, ArrayList<String> arr){
	        if(s.length() == 0){
	            list.add(new ArrayList(arr));
	            return;
	        }
	        for(int i = 0; i < s.length(); i++){
	            String res = s.substring(0,i+1);
	            if(is(res)){
	                arr.add(res);
	                dfs(s.substring(i+1,s.length()), arr);
	                arr.remove(arr.size()-1);
	            }
	        }
	        return;
	    }
	    //判断是否为回文串
	    private boolean is(String s){
	        int n = s.length();
	        if(n == 1) return true;
	        for(int i = 0; i < n/2; i++){
	            if(s.charAt(i) != s.charAt(n-1-i)) return false;
	        }
	        return true;
	    }
}
